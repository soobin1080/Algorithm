package codingtest;

import java.util.LinkedList;
import java.util.Queue;

import bj_2468.Node;

public class solution4 {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		int[][] maps = { { 0, 0, 1, 0, 0 }, { 0, 1, 1, 0, 1 }, { 0, 0, 1, 0, 1 }, { 1, 1, 1, 0, 1 } };
		boolean[][] visited = new boolean[maps.length][maps.length];
		int dy[] = { -1, 1, 0, 0 };// 상하좌우
		int dx[] = { 0, 0, -1, 1 };

		int answer = 0;
		for (int i = 0; i < maps.length; i++) {
			for (int j = 0; j < maps.length; j++) {
				int length = 0;
				if (maps[i][j] == 1 && !visited[i][j]) {
					Queue<Node> qu = new LinkedList<Node>();
					qu.add(new Node(i, j));
					visited[i][j] = true;
					while (!qu.isEmpty()) {
						Node node = qu.poll();

						for (int k = 0; k < 4; k++) {
							int yy = node.y + dy[k];
							int xx = node.x + dx[k];

							if (yy >= 0 && yy < maps.length && xx >= 0 && xx < maps.length && !visited[i][j]) {
								if (maps[i][j] == 1) {
									qu.add(new Node(yy, xx));
									visited[i][j] = true;
								} else {
									if (yy == 0 || yy == maps.length || xx == 0 || xx == maps.length) {

									}
								}
							}
						}
					}
				}
			}
		}
	}

	static class Node {
		int y;
		int x;

		Node(int y, int x) {
			this.y = y;
			this.x = x;
		}
	}

}
